Assignment for 03-07-2023-------------------->

Create a class to sell the policy with the below parameters. Also write the one parameterise constructor to assign the values in the below fields. 

Write method to get the policy details as per policy id passed.

Write a method to check the status of the policy is active/expired as per policy id passed.

Write a method to check the payment status of the policy per policy id passed.

Write setters and getters for the below fields.

Write a method to check the policy payment when will be due.
 

 //Pojo class 

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

public class Policy {
	
	//  declaration of local memebers
	
	 int policyId;
     long policyNumber;
     String nameOfPolicy;
     LocalDate policyCreatedDate;
     LocalDate policyDueDate;
     LocalDate policyPaymentDate;
     String policyStatus;
     double policyPremiumAmount;
     double policyMaturityAmount;
     double policySumAssured;
     int policyTenure;
     String policyPaymentFrequency;
     String policyPaymentStatus;
    
   
	
	
	
     @Override
	public String toString() {
		return "Policy [policyId=" + policyId + ", policyNumber=" + policyNumber + ", nameOfPolicy=" + nameOfPolicy
				+ ", policyCreatedDate=" + policyCreateDate + ", policyDueDate=" + policyDueDate
				+ ", policyPaymentDate=" + policyPaymentDate + ", policyStatus=" + policyStatus
				+ ", policyPremiumAmount=" + policyPremiumAmount + ", policyMaturityAmount="
				+ policyMaturityAmount + ", policySumAssured=" + policySumAssured + ", policyTenure="
				+ policyTenure + ", policyPaymentFrequency=" + policyPaymentFrequency + ", policyPaymentStatus="
				+ policyPaymentStatus + "]";
	}

     
     //constructor
     
	public Policy(int policyId, long policyNumber,String name, LocalDate policyCreateddate,
			LocalDate policyDueDate, LocalDate policyPaymentDate, String policyStatus,
			double policyPremiumAmount, double policyMaturityAmount, double policySumAssured, int policyTenure,
			String policyPaymentFrequency, String policyPaymentStatus) {
		super();
		this.policyId = policyId;
		this.policyNumber = policyNumber;
		nameOfPolicy = name;
		this.policyCreateddate =policyCreateddate;
		this.policyPaymentDate = policyPaymentDate;
		this.policyPaymentDate = policyPaymentDate;
		this.String policyStatus = String policyStatus;
		this.policyPremiumAmount= policyPremiumAmount;
		this.policyMaturityAmount = policyMaturityAmount;
		this.policySumAssured = policySumAssured;
		this.policyTenure = policyTenure;
		this.policyPaymentFrequency= policyPaymentFrequency;
		this.policyPaymentStatus = policyPaymentStatus;
	}
   
     //getters and setters

	public int getPolicyId() {
		return policyId;
	}

	public void setPolicyId(int policyId) {
		policyId = policyId;
	}

	public long getPolicyNumber() {
		return policyNumber;
	}

	public void setPolicyNumber(long policyNumber) {
		policyNumber = policyNumber;
	}

	public String getNameOfPolicy() {
		return nameOfPolicy;
	}

	public void setNameofPolicy(String nameofPolicy) {
		this.nameofPolicy = nameofPolicy;
	}

	public LocalDate getPolicyCreatedDate() {
		return policyCreateddate;
	}

	public void setPolicyCreatedDate(LocalDate policyCreatedDate) {
		policyCreatedDate = policyCreatedDate;
	}

	public LocalDate getPolicyDueDate() {
		return policyDueDate;
	}

	public void setPolicyDueDate(LocalDate policyDueDate) {
		policyDueDate = policyDueDate;
	}

	public LocalDate getPolicyPaymentDate() {
		return policyPaymentDate;
	}

	public void setPolicy_Payment_Date(LocalDate policyPaymentDate) {
		policyPaymentDate = policyPaymentDate;
	}

	public String getPolicy_Status() {
		return policyStatus;
	}

	public void setPolicyStatus(String policyStatus) {
		policyStatus = policyStatus;
	}

	public double getPolicyPremiumAmount() {
		return policyPremiumAmount;
	}

	public void setPolicyPremiumAmount(double policyPremiumAmount) {
		policyPremiumAmount = policyPremiumAmount;
	}

	public double getPolicyMaturityAmount() {
		return policyMaturityAmount;
	}

	public void setPolicyMaturityAmount(double policyMaturityAmount) {
		policyMaturityAmount = policyMaturityAmount;
	}

	public double getPolicySumAssured() {
		return policySumAssured;
	}

	public void setPolicySumAssured(double policySumAssured) {
		policySumAssured = policySumAssured;
	}

	public int getPolicyTenure() {
		return policyTenure;
	}

	public void setPolicyTenure(int policyTenure) {
		policyTenure = policyTenure;
	}

	public String getPolicyPaymentFrequency() {
		return policyPaymentFrequency;
	}

	public void setPolicyPaymentFrequency(String policyPaymentFrequency) {
		policyPaymentFrequency = policyPaymentFrequency;
	}

	public String getPolicyPaymentStatus() {
		return policyPaymentStatus;
	}

	public void setPolicyPaymentStatus(String policyPaymentStatus) {
		policyPaymentStatus = policyPaymentStatus;
	}

	// methods generated to fetch the information

	public static Policy getPolicyinfo(Map<Integer,Policy> mapofpolicy,int Policy_id)
     {
    	 Policy returnPolicy=mapofpolicy.get(PolicyId);
    	 
    	 return returnPolicy;
     }
     
     public static String getPolicyStatus(Map<Integer,Policy>mapofpolicy,int PolicyId)
     {
    	    Policy policy=mapofpolicy.get(Policy_id);                                  // Policy policy = Policy.getPolicyinfo(mapofpolicy, PolicyId);
    	    return policy.getPolicyStatus();
     }
	public static String getPaymentStatus(Map<Integer,Policy>mapofpolicy,int PolicyId)
        {
        	Policy policy = Policy.getPolicyinfo(mapofpolicy, PolicyId);
        	return policy.getPolicyPaymentStatus();
        }

     public static LocalDate getPaymentduedate(Map<Integer,Policy>mapofpolicy,int PolicyId)
     {
    	 Policy policy = Policy.getPolicyinfo(mapofpolicy, PolicyId);
    	 return policy.getPolicyDueDate();
     }
   

}
----------------------------
// implementation class


import java.util.HashMap;
import java.util.Map;
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.Scanner;


public class Tester {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);

		Map<Integer,Policy> map=new HashMap<>();    // generating map


         // passing values through constructor

		Policy object1=new Policy(1, 101,"CarInsurance",  LocalDate.of(2023, 07, 24), LocalDate.of(2024, 6, 24), LocalDate.of(2023, 07, 24), "active", 25000, 100000, 125000, 8, "monthly", "paid");
		Policy object2=new Policy(2, 102,"BikeInsurance" ,LocalDate.of(2023, 07, 24), LocalDate.of(2023, 7, 24), LocalDate.of(2023, 07, 24), "active", 25000, 100000, 125000, 8, "yearly","pending");
		Policy object3=new Policy(3, 103,"BusInsurance",   LocalDate.of(2023, 07, 24), LocalDate.of(2023, 07, 30), LocalDate.of(2023, 07, 24), "dormant", 25000, 100000, 125000, 8, "weekly", "pending");
		Policy object4=new Policy(4, 104,"MercedesInsurance",LocalDate.of(2023, 07, 24),LocalDate.of(2023, 07, 22),LocalDate.of(2023, 07, 24),"inactive", 35000, 100000, 125000, 9, "daily", "pending");
		Policy object5=new Policy(5, 105,"Astron-Martin-Insurance", LocalDate.of(2023,07, 5),LocalDate.of(2023,07, 5),LocalDate.of(2023,07, 5),"active",2500,10000,12500,9,"monthly","paid");
		
		map.put(object1.getPolicy_id(), object1);   // adding values to map
		map.put(object2.getPolicy_id(), object2);
		map.put(object3.getPolicy_id(), object3);
		map.put(object4.getPolicy_id(), object4);
		map.put(object5.getPolicy_id(),object5);
	
		System.out.println("enter key to get policy details ");
		int Policyid=sc.nextInt();
		if(map.containsKey(Policyid))
		{
			
		
		
		Policy obj = Policy.getPolicyinfo(map, policyId);  // get policy details
		
		System.out.println(obj.toString());
		
		System.out.println("Policy  status  is ");
		String policyStatus=Policy.getPolicyStatus(map, policyId);  // get policy status
		System.out.println(PolicyStatus);
		 
		
		System.out.println("policy payment status is ");
		String paymentStatus=Policy.getPaymentStatus(map, PolicyId);   // get policypayment status
		System.out.println("status of payment is "+paymentStatus);
		
		 System.out.println("payment due date is as follows  ");
		 LocalDate paymentduedate=Policy.getPaymentduedate(map, PolicyId);   // get policy due date
		 System.out.println("days left are  "+ChronoUnit.DAYS.between(LocalDate.now(),paymentduedate)+"  as on  "+LocalDate.now());
		 
		 System.out.println("period remaining is ");
		 Period periodObj = Period.between(LocalDate.now(), paymentduedate);  // get period for due date
		 int days = periodObj.getDays();
		 int month=periodObj.getMonths();
		 int year=periodObj.getYears();
		 System.out.println(year+ "years"+ month+ "months" +days+ "days" );
		   
		}
		else
		{
		 System.out.println("Entry not found!! enter new details");
		
		  
		 Policy newPolicy=new Policy(sc.nextInt(),sc.nextLong(),sc.next(),LocalDate.parse(sc.next()),LocalDate.parse(sc.next()),LocalDate.parse(sc.next()),sc.next(),sc.nextDouble(),sc.nextDouble(),sc.nextDouble(),sc.nextInt(),sc.next(),sc.next());
		 if(map.containsKey(newPolicy.getPolicy_id()))
		 {
			 System.out.println("id exists and duplicated ");
		 }
		 else
		 {
		 
		 map.put(newPolicy.getPolicyId(), newPolicy);      // add new policy
		 System.out.println("newly entered entry is ");
		 System.out.println(newpolicy.toString());
		 
		 }
		
	}	}
	 
	      
	       
      
	
	
}

----> Write a class where all the components will be used like- SIB, IIB, Constructors, data members, methods etc.

class Student
{
    int rollno;
    String name;
    static String CollegeName="Oxford";
    static
    {
        System.out.println("static block executed");
    }
    {
        System.out.println("IIB executed ");
    }
    
    Student(int rollno,String name)
    {
        this.rollno=rollno;
        this.name=name;
        System.out.println("constructor executed");
    }
    
    void display()
    {
        System.out.println("rollno is  "+rollno+"name of student is  "+name+"college is  "+CollegeName);
    }
}

public class Main{
    public static void main(String args[])
    {
        Student object1=new Student(1,"name1");
        Student object2=new Student(2,"name2");
        Student ss=new Student(3,"name3");
        object1.display();
        object2.display();
    }
} 


output--->  
static block executed
IIB executed 
constructor executed
IIB executed 
constructor executed
IIB executed 
constructor executed
rollno is  1name of student is  name1college is  Oxford
rollno is  2name of student is  name2college is  Oxford
------------------------------------------------------------------------

What is Liferay?
Liferay is an open source enterprise portal and Java-based web application platform provides a toolset for the development of customizable portals and websites.


Why we use Liferay?
Liferay is a modern and secure solution that offers personalization, analytics, and content management all in one place.
Easy to use & learn
Feature-rich
Large community of users
Free (Community Edition)
Support for standard technologies
Extremely flexible in deployment options
Mainly, Liferay presents itself as “One Platform. Endless Solutions.” It helps with various kinds of development challenges and is mostly used in B2B and B2E environments. With Liferay, you can create a portal solution tailored exactly for your business.



What is the use of portal-ext.properties?
We cannot directly modify the portal.properties file; instead,we create a separate file to override properties  to change. The portal-ext.properties file has been defined for this purpose.



What is the use of data folder in Liferay home?
Use to store data so that the path can be stored and linked in the database.
Stores an embedded HSQL database, DXP’s file repository, and search indexes. The embedded HSQL database is configured by default, but it’s intended for demonstration and trial purposes only. 



What is the use of deploy folder in Liferay home?
By default, this folder auto-deploys plugins. Auto-deploy supports application .lpkg files from Liferay Marketplace, plugin .war files, and plugin .jar files.
You can configure an alternative path for the deploy folder by setting the portal property auto.deploy.deploy.dir.



What is the default data base of Liferay?
Liferay comes with a default database called “HSQL” or “Hypersonic”


