write a method to add two integers numbers
write a method to print day of a number
write a method to print a table
write a method to check a number is armstrong is not 
write a method to create a map for different line of business


-----------------Program 1
public int add(int a,int b)
{
      return a+b;
}


-----------------Program 2
    
       void day(int x)
          {
               String[] arr={"Sat","Sun","Mon","Tue","Wed","Thurs","Fri"};
                 if(x>0)
                         
                         System.out.print(arr[(x%7)]);
                           
                 else
                         System.out.print("input cannot be 0");
          }         

---------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;

class ABC
{
    public static void main(String args[])
    {
      
        Scanner sc=new Scanner(System.in);
        int i=sc.nextInt();
        day(i);
       
    }
   public static void day(int i)
     {
              String[] arr={"mon","tue","wed","thurs","fri","sat","sun"};
            if(i>0)
                  System.out.println(arr[i%7]);
            else
                  System.out.println("invalid date entered");
        }
}
------------------------------------------------------------------------------------------------------------------------------------------


----------------Program 3
void table(int x)
{
     for(int i=1;i<=10;i++)
      {
             System.out.print(x+ " * "+i+ "=" +(x*i));
      }
}


--------------Program 4
int armstrong(int x)

{
      int sum=0;
      while(x>0)
   {
         int remainder=x%10;
         sum=sum+remainder*remainder*remainder;
         x=x/10;
     }
         return sum;
}

   if(sum==x)
            System.out.print("number is armstrong");
   else
            System.out.print("number is not armstrong");


---------------Program 5

              Map<Integer,Character> lob=new HashMap<>();
             
              call(3);
                
              void call(int x)
              {   
                  lob.put(1,"Bike-Insurance");
                  lob.put(2,"Car-Insurance");
                  lob.put(3,"health-Insurance");
                   
              for(Map.Entry<Integer,Character> e : lob.entrySet())
                        {
                            System.out.print(e.getKey()+ " " +e.getValue());
                        }
                    
                   
             }
         
------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.Map;
import java.util.HashMap;

class ABC
{
       public static void main(String args[])
       {
           HashMap<String,Integer> map=new HashMap<>();
           map.put("noida",1);
           map.put("delhi",2);
           map.put("mumbai",3); 
     
           System.out.println("size of map is "+map.size());
           System.out.println(map);

           if(map.containsKey("mumbai"))
           {
                Integer a = map.get("vishal");
                System.out.println("value of mumbai is "+a);
           }
           
             int j=2;
           if(map.containsValue(j))
                     System.out.println("map has value " +j+ "present in it ");  
           else
                    System.out.println("value "+j+ "not present in it");
       }

}
---------------------------------------------------------------------------------------------
import java.util.HashMap;
import java.util.Map;

public class MapCollectionProgram {
    public static void main(String[] args) {
        // Creating a new HashMap
        Map<String, Integer> populationMap = new HashMap<>();

        // Adding elements to the map
        populationMap.put("New York", 8623000);
        populationMap.put("Los Angeles", 3990000);
        populationMap.put("Chicago", 2716000);
        populationMap.put("Houston", 2326000);
        populationMap.put("Phoenix", 1665000);

        // Accessing elements in the map
        int populationNY = populationMap.get("New York");
        System.out.println("Population of New York: " + populationNY);

        // Updating an element in the map
        populationMap.put("New York", 9000000);

        // Removing an element from the map
        populationMap.remove("Phoenix");

        // Iterating over the map and printing all key-value pairs
        System.out.println("City\t\tPopulation");
        for (Map.Entry<String, Integer> entry : populationMap.entrySet()) {
            String city = entry.getKey();
            int population = entry.getValue();
            System.out.println(city + "\t\t" + population);
        }

        // Checking if a key exists in the map
        String city = "Los Angeles";
        if (populationMap.containsKey(city)) {
            int population = populationMap.get(city);
            System.out.println(city + " population: " + population);
        } else {
            System.out.println(city + " not found in the map.");
        }

        // Checking if a value exists in the map
        int population = 2716000;
        if (populationMap.containsValue(population)) {
            System.out.println("City with population " + population + " exists in the map.");
        } else {
            System.out.println("City with population " + population + " not found in the map.");
        }

        // Clearing the map
        populationMap.clear();

        // Checking if the map is empty
        if (populationMap.isEmpty()) {
            System.out.println("Map is empty.");
        } else {
            System.out.println("Map is not empty.");
        }
    }
}
----------------
import java.util.Map;
import java.util.HashMap;

class ABC
{
        public static void main(String args[])
        {
             Map<Character,Integer> map=new HashMap<Character,Integer>();

             map.put('a',1);
             map.put('d',2);
             map.put('g',3);

            System.out.println("key-value pair in the map is as ---->" +map);
            map.put('a',8055);

           char s='g';//String s="New Delhi", char c='s';
           if(map.containsKey(s));
           {
               System.out.println(map.get('g'));
           }
 
             int j=8055;
           if(map.containsValue(j))
           {
                  System.out.println("value" +j+ "is present in the map ");
           }
            for(Map.Entry<Character,Integer> e : map.entrySet())
             {
                 System.out.println(e.getKey()+ " " +e.getValue());
                 
             }
        }
}
-------------------------------

Custom Exception

class MyException extends Exception
{
   public MyException(String msg)
      {
            super(msg);
      }
}
class Main
{
       static void validate(int x) throws MyException
       {
            if(age<18)
              {
                 throw new MyException("age is not valid");
              }
             else
              {
                   System.out.println("welcome you are eligible to vote");
               }
       }

      static void main(String args[])
         {
               try
               {
                   validate(13);
               }
               catch(MyException e)
                {
                    System.out.println("exception is raised ");
 
                     System.out.println("exception caught is " +e);
                }
         }
}
---------------------------

class MyException extends Exception
{
     public MyException(String msg)
     {
              super(msg);
     }        
}

class Main
{
         public static void validate(int x) throws MyException
          {
                 if(x<18)
                 {
                     throw new MyException("you are not eligible to vote ");
                 }
                 else
                  {
                    System.out.println("welcome for vote ");      
                  }
          }
        public static void main(String args[])
          {
                  try
                  {
                      validate(13);
                  }
                  catch(MyException msg)
                  {
                        System.out.println("exception "+msg);
                  }
          }
}
-------------------------
import java.util.Map;
import java.util.HashMap;

class Main
{
   public static void main(String args[])
   {
     Map<String,Integer> map=new HashMap<>();
     map.put("mumbai",8055);
     map.put("delhi",555);
     map.put("chennai",999);
     map.put("banglore",1000);

     System.out.println(map);
     if(map.containsKey("chennai"))
     {
            System.out.println(map.get("chennai"));
     }                
    int j=8055;
     if(map.containsValue(j))
       {
             System.out.println("value" +j+ "is present in the map");
       }
     for(Map.Entry<String,Integer> e : map.entrySet())
     {
                    System.out.println(e.getValue()+ " " +e.getKey());      
     }
   }
}
-------------
import java.util.List;
import java.util.*;
 class Main
 {
     public static void main(String args[])
     {
         List<Integer> numbers=Arrays.asList(4,6,7,2,9);
         numbers.stream().map(n->n*n*n).forEach(n->System.out.println(n));
         System.out.println(numbers);
     }
 }
------------
import java.util.*;
import java.util.stream.Collectors;
  
class GFG
{   
    // Driver code
    public static void main(String[] args)
    {   
        // Creating a list of Prime Numbers
        List<Integer> PrimeNumbers = Arrays.asList(5, 7, 11,13);
          
        // Creating a list of Odd Numbers
        List<Integer> OddNumbers = Arrays.asList(1, 3, 5);
          
        // Creating a list of Even Numbers
        List<Integer> EvenNumbers = Arrays.asList(2, 4, 6, 8);
  
        List<List<Integer>> listOfListofInts =
                Arrays.asList(PrimeNumbers, OddNumbers, EvenNumbers);
  
        System.out.println("The Structure before flattening is : " +
                                                  listOfListofInts);
          
        // Using flatMap for transformating and flattening.
        List<Integer> listofInts  = listOfListofInts.stream()
                                    .flatMap(list -> list.stream())
                                    .collect(Collectors.toList());
  
        System.out.println("The Structure after flattening is : " +
                                                         listofInts);
    }
}
Output :

The Structure before flattening is : [[5, 7, 11, 13], [1, 3, 5], [2, 4, 6, 8]]
The Structure after flattening is : [5, 7, 11, 13, 1, 3, 5, 2, 4, 6, 8]
----------------------------------------------------------------------------------
import java.util.*;
  
class GFG {
  
    // Driver code
    public static void main(String[] args)
    {
  
        // Creating list of integers
        List<Integer> array = Arrays.asList(-2, 0, 4, 6, 8);
  
        // Finding sum of all elements
        int sum = array.stream().reduce(0,
                (element1, element2) -> element1 + element2);
  
        // Displaying sum of all elements
        System.out.println("The sum of all elements is " + sum);
    }
}
Output :

The sum of all elements is 16
------------------------------------------------------------------------------------
import java.util.*;
  
class GFG {
  
    // Driver code
    public static void main(String[] args)
    {
  
        // String array
        String[] array = { "Geeks", "for", "Geeks" };
  
        // The result of the reduce() method is
        // an Optional because the list on which
        // reduce() is called may be empty.
        Optional<String> String_combine = Arrays.stream(array)
                                           .reduce((str1, str2)
                                           -> str1 + "-" + str2);
  
        // Displaying the combined String
        if (String_combine.isPresent()) {
            System.out.println(String_combine.get());
        }
    }
}
Output :

Geeks-for-Geeks
------------------------------------------------------------------------------------------------------------
/* Online Java Compiler and Editor */
public class Main {
    public static void main(String[] args) 
    {
        double i=(4101f/25);
        System.out.println(String.format("%.6f", i));
    
      
       System.out.println(i);
    }
}

164.039993
164.0399932861328
----------------------------------------------
public class Main {
    public static void main(String[] args) 
    {
       float g=(8.4f/9);
        System.out.printf("%.3f",g);
    }
}

0.933
--------------------------------------------------------------------------------------------------------------------
public class Main {
    public static void main(String[] args) 
    {
       float g=(8.4f/7);
        System.out.printf("%.3f",g);
    }
}

1.200
----------------------------------------------------------------------------------------------------------------------

import java.util.Scanner;

class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter a year ");
        int i=sc.nextInt();
        if((i%4==0 && i%100!=0) || (i%400==0))
        {
            System.out.println(i+" is a leap year ");
        }
        else
        {
            System.out.println(i+ " is not a leap year ");
        }
    }
}
----------------------------------------------------------------------------------




Thanks,
Ashutosh Shravan Hanumante
------------------------------------------------------
import java.util.Scanner;

class ABC
{
public static void main(String args[])
{
          Scanner sc=new Scanner(System.in);
          int income1=sc.nextInt();
          int income2=sc.nextInt();
          long j = calculate(income1,income2);
}
 public static long calculate(int x,int y)
{
         long s=0;
         
         s= x+y;

         return s;
}
}
-----------------------------------
don't use nesting of for loop
use proper naming conventions
delete work temp and osgi state
------------------------------------
import java.util.Map;
import java.util.HashMap;

class Main
{
    public static void main(String args[])
    {
        calltoprint();
    }
    
    public static void calltoprint()
    {
        Map<Integer,String> list=new HashMap<>();
        list=calltogeneratemap();
        for(Map.Entry<Integer,String> e : list.entrySet())
        {
            System.out.println(e.getKey()+" "+e.getValue());
        }
    }
    public static Map calltogeneratemap()
    {
        Map<Integer,String> listofb=new HashMap<>();
        listofb.put(1,"car-insurance");
        listofb.put(2,"cycle-insurance");
        listofb.put(3,"bus-insurance");
        
        return listofb;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
import java.util.*;
import java.io.*;

public class Main
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter a string ");
        String x=sc.nextLine();
        boolean j=pal(x);
        if(j)
           System.out.println("String is palindrome ");
        else
           System.out.println("String is not palindrome ");
    }
    public static boolean pal(String x)
    {
       
       int left=0, right=x.length()-1;
       x=x.toLowerCase();
       while(left<right)
       {
          if(x.charAt(left)!=x.charAt(right))
          {
              return false;
          }
          left++;
          right--;
       }
       return true;
       
       
    }
}

-----------------------------------------

// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.Scanner;

class Main 
{
    public static void main(String[] args) 
    {
      Scanner sc=new Scanner(System.in);
      System.out.println("enter a  string ");
      String str=sc.nextLine();
      boolean j=true;
      j=meth(str);
        if(j)
          System.out.println("palindrome string ");
        else
          System.out.println("not palindrome string ");
     }
     public static boolean meth(String k)
     {
         int i=0, j=(k.length()-1);
        while(i<j)
         {
           if(k.charAt(i)!=k.charAt(j))
           {
               return false;
               
           }
           i++;
           j--;
         }
         return true;
     }
}

-----------------------------------------

class Main {
  public static void main(String[] args) {

    String str = "Radar", reverseStr = "";
    
    int strLength = str.length();

    for (int i = (strLength - 1); i >=0; --i) {
      reverseStr = reverseStr + str.charAt(i);
    }

    if (str.toLowerCase().equals(reverseStr.toLowerCase())) {
      System.out.println(str + " is a Palindrome String.");
    }
    else {
      System.out.println(str + " is not a Palindrome String.");
    }
  }
}
-----------------------------------------------
import java.io.*;
 
class GFG {
    public static boolean isPalindrome(String str)
    {
        // Initializing an empty string to store the reverse
        // of the original str
        String rev = "";
 
        // Initializing a new boolean variable for the
        // answer
        boolean ans = false;
 
        for (int i = str.length() - 1; i >= 0; i--) {
            rev = rev + str.charAt(i);
        }
 
        // Checking if both the strings are equal
        if (str.equals(rev)) {
            ans = true;
        }
        return ans;
    }
    public static void main(String[] args)
    {
        // Input string
        String str = "geeks";
 
        // Convert the string to lowercase
        str = str.toLowerCase();
        boolean A = isPalindrome(str);
        System.out.println(A);
    }
}

-----------------------------------------
class Main
{
    public static void main(String args[])
    {
        for(int i=1;i<=6;i++)
        {
              for(int j=1;j<=i;j++)
              {
                  if(i%2==1)
                       System.out.print("*");
                   else
                       System.out.print("#");
              }
              System.out.println();
        }
    }
}

output-->
*
##
***
####
*****
######
-------------------------
public class Main
{
    public static void main(String args[])
    {
        String a="ab1243468fg135";
        int even = 0;
        int odd = 0;
        String news="";
        for(int i=0;i<a.length();i++)
        {
            if(Character.isDigit(a.charAt(i))){
                
                if(a.charAt(i)%2 == 0){
                    even = even + 1;
                }
                else 
                odd++;
                
                if(even == 2){
                news = news + "@";
                news = news + a.charAt(i);
                even = 0;
                }
                else if(odd == 2){
                news = news + "#";
                news = news + a.charAt(i);
                odd = 0;
                }
                else 
                            news = news + a.charAt(i);

            }
            else
            news = news + a.charAt(i);
            
        }
        
        System.out.print(news);
    }
}



------------------------
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

class HelloWorld {
    public static void main(String[] args) {
       calltoprintmap();
    }
    public static void calltoprintmap()
    {
        Map<Integer,String> list=null;
        list=calltogetmap();
        for(Map.Entry<Integer,String> e : list.entrySet())
        {
            System.out.println(e.getKey()+"<--------->"+e.getValue());
        }
    }
    public static Map calltogetmap()
    {
        Map<Integer,String> lob=new HashMap<>();
        lob.put(1,"Bike-Insurance");
        lob.put(2,"Car-Insurance");
        lob.put(3,"Cycle-Insurance");
        
        return lob;
    }
}

---------------------------------------------------------------------------------------
public class MyClass {
    public static void main(String args[]) {
      StringBuilder j=call(03,2023,"04-06-2008");
      System.out.println(j);
    }
    
    public static StringBuilder call(int x,int y, String z)
    {
        StringBuilder b=new StringBuilder("");
        String year=String.valueOf(y);
        b=b.append(x);
        b=b.append(year.substring(2,4));
        int day=Integer.parseInt(z.substring(0,2));
        int month=Integer.parseInt(z.substring(3,5));
        int yr=Integer.parseInt(z.substring(6,10));
        int sum=0;
        sum=day+month+yr;
        b=b.append(sum);
        return b;
    }
}


class EmployeeCode {

    public static void main(String[] args) {
      String joiningDate = "20-06-2023";
      String dob = "27-05-1996";

      String employeeCode = "";
      employeeCode = generateEmployeeCode(joiningDate,dob);
      System.out.print(employeeCode);

    }

    static String generateEmployeeCode(String joiningDate,String dob){
        String employeeCode = "";
        employeeCode = ""+joiningDate.substring(0,2)+""+joiningDate.substring(3,5);

        int sumOfDigitsOfDob = 0;

        sumOfDigitsOfDob = sumOfDigitsOfDob + Integer.parseInt(dob.substring(6)) + Integer.parseInt(dob.substring(0,2)) + Integer.parseInt(dob.substring(3,5)) ;

        employeeCode = employeeCode + sumOfDigitsOfDob;

        return employeeCode;
    }
}

-----------------

import java.util.ArrayList;
import java.util.List;
class SwapNumber {
    
    public static void main(String[] args) {
       int num1 = 10;
       int num2 = 20;
      
      ArrayList<Integer> swappedNumbers = swap(num1,num2);
      
        num1 = swappedNumbers.get(0).intValue();
        num2 = swappedNumbers.get(1).intValue();
        
        System.out.print(num1 + " " + num2);
        
    }
    
    static ArrayList swap(int num1,int num2){
        ArrayList<Integer> resultList = new ArrayList<>();
       
        num1 = num1+num2;
        num2 = num1 - num2;
        num1 = num1 - num2;
        resultList.add(num1);
        resultList.add(num2);
        
        
        return resultList;
    }
}
---------------
public int[] swapNums(int num1, int num2)
{

 
        
        num1= num1-num2;
        num2 =num1+num2;
        num1= num2-num1;
   
	int[] swappedNums = new int[2];
	swappedNums[0] = num1;
	swappedNums[1] = num2;       

      return swappedNums; 

}
----------------------------

import java.io.*;
 
// Main class
class GFG {
 
    // Method 1
    // Main driver method
    public static void main(String[] args)
    {
        // An integer array storing the returned array
        // from the method
        int[] storage = methodReturningArray();
 
        // Printing the elements of the array
        for (int i = 0; i < storage.length; i++)
            System.out.print(storage[i] + " ");
    }
 
    // Method 2
    // Returning an integer array
    public static int[] methodReturningArray()
    {
        int[] sample = { 1, 2, 3, 4 };
 
        // Return statement of the method.
        return sample;
    }
}
Output
1 2 3 4 

---------

public class StringToCharExample1{  
public static void main(String args[]){  
String s="hello";  
char c=s.charAt(0);//returns h  
System.out.println("1st character is: "+c);  
}}  

Output:

1st character is: h

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.util.Scanner;
public class Main {
    public static void main(String args[]) 
          {
              Scanner sc=new Scanner(System.in);
              System.out.println("enter month in two digit format ");
              String month=sc.nextLine();
              System.out.println("enter only year ");
             String year=sc.nextLine();
              System.out.println("please enter date in format DD-MM-YYYY");
              String yr=sc.nextLine();
          StringBuffer j= calculate(month,year,yr);
          System.out.println("Newly generated EmployeeCode is  "+j);
          }
    public static StringBuffer calculate(String month,String year,String yr)
    {
        
        StringBuffer sb=new StringBuffer("");
        sb=sb.append(month);
        
       
        sb=sb.append(year.substring(2,4));
        int day=Integer.parseInt(yr.substring(0,2));
        int mon=Integer.parseInt(yr.substring(3,5));
        int ya=Integer.parseInt(yr.substring(6,10));
        int sum=0;
        sum=day+mon+ya;
        sb=sb.append(sum);
         return sb;
    }
}

-----------------------
class Student
{
    int rollno;
    String name;
    static String CollegeName="ABC";
    static
    {
        System.out.println("static block executed");
    }
    {
        System.out.println("IIB executed ");
    }
    
    Student(int rollno,String name)
    {
        this.rollno=rollno;
        this.name=name;
    }
    
    void display()
    {
        System.out.println("rollno is  "+rollno+"name of student is  "+name+"college is  "+CollegeName);
    }
}

public class Main{
    public static void main(String args[])
    {
        Student object1=new Student(1,"name1");
        Student object2=new Student(2,"name2");
        Student ss=new Student(3,"name3");
        object1.display();
        object2.display();
    }
} 


output--->  
static block executed
IIB executed 
IIB executed 
IIB executed 
rollno is  1 name of student is  name1 college is  ABC
rollno is  2 name of student is  name2 college is  ABC
------------------------------------------------------------------------
-----------------------------------

Inside a constructor we can call another constructor explicitly by using super or this keyword, where this is to call another constructor in the same class and
 super is to call another constructor of super class.

Let's see how to call another constructor by using this and super keyword with an example.

Calling another constructor in the same class (using this keyword)
class Person{
   String name;
   
   public Person(){
      this("John");   // Explicit Constructor Invocation
   }

   public Person(String name){
      this.name = name;
   }

   public void displayMyName(){
      System.out.println(this.name);
   }
}

public class Test{
   public static void main(String args[]){
      Person p1 = new Person();
      p1.displayMyName();
   }
}In the preceding program initially Person class default constructor is called and from within it we are calling Person class single-argument constructor
 explicitly as this("John").

Calling another constructor of super class (using super keyword)
class Employee{
   Integer id;
 
   public Employee(Integer id) {
      this.id = id;
   }
}

class Person extends Employee{   
   public Person(){
      super(101);   // Explicit Constructor Invocation
   }

   public void displayMyId(){
      System.out.println(this.id);
   }
}

public class Test{
   public static void main(String args[]){
      Person p1 = new Person();
      p1.displayMyId();
   }
}In the preceding program initially sub class (Person) default constructor is called and from within it we are calling super class (Employee) single-argument constructor explicitly as super(101).

Points to Remember:
Calling a constructor statement must always be the first statement inside a constructor
Based on the number and the type of arguments the compiler determines which constructor to call
Make sure to avoid recursive constructor invocation
class Person{
   public Person(){
      this();   // Recursive Constructor Invocation
   }
}

The above code causes recursive constructor invocation which is illegal and throws compile-time error


------------
class A{  
 int a=40;//non static  
   
 public static void main(String args[]){  
  System.out.println(a);  
 }  
}        
as static cannot access non-static data
Output:Compile Time Error
---------
 Can we execute a program without main() method?
Ans) No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a Java class without the main method.

class A3{  
  static{  
  System.out.println("static block is invoked");  
  System.exit(0);  
  }  
}  
Test it Now
Output:

static block is invoked
Since JDK 1.7 and above, output would be:

Error: Main method not found in class A3, please define the main method as:
   public static void main(String[] args)
or a JavaFX application class must extend javafx.application.Application
----------------------------------------------------------------------------------------------

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.*;

 

import week2.*;
public class Test {


     static boolean loop = true;

     public static void main(String args[]) {



        HashMap<Integer,Policy> policyMap = new HashMap<>();

        Policy p1 = new Policy(111, 5678, "sds", LocalDate.of(2006, 02, 03), LocalDate.of(2026, 02, 03), LocalDate.of(2023, 07, 31), "active", 3244.345    , 2, "yearly", "paid");
        Policy p2 = new Policy(222, 5678, "sds",LocalDate.of(2006, 02, 03), LocalDate.of(2025, 02, 03), LocalDate.of(2023, 07, 26), "expired", 3244.345    , 2, "yearly", "payment due");
        Policy p3 = new Policy(333, 5678, "sds", LocalDate.of(2006, 02, 03), LocalDate.of(2028, 02, 03), LocalDate.of(2023, 07, 15), "active", 3244.345    , 2, "yearly", "paid");

         policyMap.put(p1.getPolicyId(), p1);
         policyMap.put(p2.getPolicyId(), p2);
         policyMap.put(p3.getPolicyId(), p3);


         while(loop) {

             System.out.println("enter 1 -> get policy details by policyId" +"\n"+  "enter 2 -> check status by id"  +"\n"+ "enter 3 -> check payment status by id" +"\n"+  "enter 4 -> check payment due date" +"\n"+ "enter 5 -> EXIT");

             Scanner sc = new Scanner(System.in);

             int option = sc.nextInt();

             switch (option) {
            case 1:
                System.out.println("enter the id");
                int id = sc.nextInt();

                if(policyMap.containsKey(id)) {
                    System.out.println(policyMap.get(id) +"\n\n");
                }
                else {
                    System.out.println("policy not found!!!" +""+ "\n\n");
                }



                break;

            case 2:
                System.out.println("enter the policy ID");
                int id1 = sc.nextInt();

                if(policyMap.containsKey(id1)) {
                    System.out.println(policyMap.get(id1).getPolicyStatus() +"\n\n");
                }
                else {
                    System.out.println("policy not found!!!" +""+ "\n\n");
                }

                break;


            case 3:
                System.out.println("enter the policy ID");
                int id2 = sc.nextInt();

                if(policyMap.containsKey(id2)) {
                    System.out.println(policyMap.get(id2).getPolicyPaymentStatus() +"\n\n");
                }
                else {
                    System.out.println("policy not found!!!" +""+ "\n\n");
                }


                break;


            case 4:
                System.out.println("enter the policy ID");
                int id3 = sc.nextInt();

                if(policyMap.containsKey(id3)) {
                    System.out.println("your policy premium is due in "  +ChronoUnit.DAYS.between(LocalDate.now(),policyMap.get(id3).getPolicyPaymentDate())+" days, on " +policyMap.get(id3).getPolicyPaymentDate()+ "\n\n");
                }
                else {
                    System.out.println("policy not found!!!" +""+ "\n\n");
                }



                break;

            case 5:
                    loop = false;

                break;


         }



 

        

        }
         System.out.println("THANK YOU !!!");

     }

 

}

--------------------------------------------
in tester.java

import java.util.HashMap;



import java.util.Map;
import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.Scanner;


public class Tester {
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		Map<Integer,Policy> map=new HashMap<>();
		Policy object1=new Policy(1, 101, "CarInsurance", LocalDate.of(2023, 07, 24), LocalDate.of(2024, 9, 24), LocalDate.of(2023, 07, 24), "active", 25000, 100000, 125000, 8, "monthly", "paid");
		Policy object2=new Policy(2, 102, "BikeInsurance", LocalDate.of(2023, 07, 24), LocalDate.of(2023, 7, 24), LocalDate.of(2023, 07, 24), "active", 25000, 100000, 125000, 8, "yearly", "pending");
		Policy object3=new Policy(3, 103, "BusInsurance",  LocalDate.of(2023, 07, 24), LocalDate.of(2023, 07, 30), LocalDate.of(2023, 07, 24), "dormant", 25000, 100000, 125000, 8, "weekly", "pending");
		Policy object4=new Policy(4, 104,"MercedesInsurance",LocalDate.of(2023, 07, 24),LocalDate.of(2023, 07, 22),LocalDate.of(2023, 07, 24),"inactive", 35000, 100000, 125000, 9, "daily", "pending");
		Policy object5=new Policy(5, 105, "Astron-Martin-Insurance",LocalDate.of(2023,07, 5),LocalDate.of(2023,07, 5),LocalDate.of(2023,07, 5),"active",2500,10000,12500,9,"monthly","paid");
		
		map.put(object1.getPolicy_id(), object1);
		map.put(object2.getPolicy_id(), object2);
		map.put(object3.getPolicy_id(), object3);
		map.put(object4.getPolicy_id(), object4);
		map.put(object5.getPolicy_id(),object5);
	
		System.out.println("enter key to get policy details ");
		int Policyid=sc.nextInt();
		if(map.containsKey(Policyid))
		{
			
		
		
		Policy obj = Policy.getPolicyinfo(map, Policyid);
		
		System.out.println(obj.toString());
		
		System.out.println("Policy  status  is ");
		String Policystatus=Policy.getPolicyStatus(map, Policyid);
		System.out.println(Policystatus);
		 
		
		System.out.println("policy payment status is ");
		String paymentstatus=Policy.getPaymentStatus(map, Policyid);
		System.out.println("status of payment is "+paymentstatus);
		
		 System.out.println("payment due date is as follows  ");
		 LocalDate paymentduedate=Policy.getPaymentduedate(map, Policyid);
		 System.out.println("days left are  "+ChronoUnit.DAYS.between(LocalDate.now(),paymentduedate)+"  as on  "+LocalDate.now());
		 
		 System.out.println("month left are------ ");
		 Period periodObj = Period.between(LocalDate.now(), paymentduedate);
		 int days = periodObj.getDays();
		 int month=periodObj.getMonths();
		 int year=periodObj.getYears();
		 System.out.println(year+ "years"+ month+ "months" +days+ "days" );
		   
		}
		else
		{
		 System.out.println("Entry not found!! enter new details");
		
		 
		 Policy pol=new Policy(sc.nextInt(),sc.nextLong(),sc.next(),LocalDate.parse(sc.next()),LocalDate.parse(sc.next()),LocalDate.parse(sc.next()),sc.next(),sc.nextDouble(),sc.nextDouble(),sc.nextDouble(),sc.nextInt(),sc.next(),sc.next());
		 if(map.containsKey(pol.getPolicy_id()))
		 {
			 System.out.println("id exists and duplicated ");
		 }
		 else
		 {
		 
		 map.put(pol.getPolicy_id(), pol);
		 System.out.println("newly entered entry is ");
		 System.out.println(pol);
		 
		 }
		
	}	}
	 
	      
	       
      
	
	
}
------------------
in tester.java

import java.time.LocalDate;


import java.util.HashMap;
import java.util.Map;

public class Policy {
	
	 int Policy_id;
     long Policy_number;
     String nameofPolicy;
     LocalDate Policy_Created_date;
     LocalDate Policy_Due_Date;
     LocalDate Policy_Payment_Date;
     String Policy_Status;
     double Policy_Premium_Amount;
     double Policy_Maturity_Amount;
     double Policy_Sum_Assured;
     int Policy_Tenure;
     String Policy_Payment_Frequency;
     String Policy_Payment_Status;
    
   
	
	
	
     @Override
	public String toString() {
		return "Policy [Policy_id=" + Policy_id + ", Policy_number=" + Policy_number + ", nameofPolicy=" + nameofPolicy
				+ ", Policy_Created_date=" + Policy_Created_date + ", Policy_Due_Date=" + Policy_Due_Date
				+ ", Policy_Payment_Date=" + Policy_Payment_Date + ", Policy_Status=" + Policy_Status
				+ ", Policy_Premium_Amount=" + Policy_Premium_Amount + ", Policy_Maturity_Amount="
				+ Policy_Maturity_Amount + ", Policy_Sum_Assured=" + Policy_Sum_Assured + ", Policy_Tenure="
				+ Policy_Tenure + ", Policy_Payment_Frequency=" + Policy_Payment_Frequency + ", Policy_Payment_Status="
				+ Policy_Payment_Status + "]";
	}

	public Policy(int policy_id, long policy_number, String nameofPolicy, LocalDate policy_Created_date,
			LocalDate policy_Due_Date, LocalDate policy_Payment_Date, String policy_Status,
			double policy_Premium_Amount, double policy_Maturity_Amount, double policy_Sum_Assured, int policy_Tenure,
			String policy_Payment_Frequency, String policy_Payment_Status) {
		super();
		Policy_id = policy_id;
		Policy_number = policy_number;
		this.nameofPolicy = nameofPolicy;
		Policy_Created_date = policy_Created_date;
		Policy_Due_Date = policy_Due_Date;
		Policy_Payment_Date = policy_Payment_Date;
		Policy_Status = policy_Status;
		Policy_Premium_Amount = policy_Premium_Amount;
		Policy_Maturity_Amount = policy_Maturity_Amount;
		Policy_Sum_Assured = policy_Sum_Assured;
		Policy_Tenure = policy_Tenure;
		Policy_Payment_Frequency = policy_Payment_Frequency;
		Policy_Payment_Status = policy_Payment_Status;
	}

	public int getPolicy_id() {
		return Policy_id;
	}

	public void setPolicy_id(int policy_id) {
		Policy_id = policy_id;
	}

	public long getPolicy_number() {
		return Policy_number;
	}

	public void setPolicy_number(long policy_number) {
		Policy_number = policy_number;
	}

	public String getNameofPolicy() {
		return nameofPolicy;
	}

	public void setNameofPolicy(String nameofPolicy) {
		this.nameofPolicy = nameofPolicy;
	}

	public LocalDate getPolicy_Created_date() {
		return Policy_Created_date;
	}

	public void setPolicy_Created_date(LocalDate policy_Created_date) {
		Policy_Created_date = policy_Created_date;
	}

	public LocalDate getPolicy_Due_Date() {
		return Policy_Due_Date;
	}

	public void setPolicy_Due_Date(LocalDate policy_Due_Date) {
		Policy_Due_Date = policy_Due_Date;
	}

	public LocalDate getPolicy_Payment_Date() {
		return Policy_Payment_Date;
	}

	public void setPolicy_Payment_Date(LocalDate policy_Payment_Date) {
		Policy_Payment_Date = policy_Payment_Date;
	}

	public String getPolicy_Status() {
		return Policy_Status;
	}

	public void setPolicy_Status(String policy_Status) {
		Policy_Status = policy_Status;
	}

	public double getPolicy_Premium_Amount() {
		return Policy_Premium_Amount;
	}

	public void setPolicy_Premium_Amount(double policy_Premium_Amount) {
		Policy_Premium_Amount = policy_Premium_Amount;
	}

	public double getPolicy_Maturity_Amount() {
		return Policy_Maturity_Amount;
	}

	public void setPolicy_Maturity_Amount(double policy_Maturity_Amount) {
		Policy_Maturity_Amount = policy_Maturity_Amount;
	}

	public double getPolicy_Sum_Assured() {
		return Policy_Sum_Assured;
	}

	public void setPolicy_Sum_Assured(double policy_Sum_Assured) {
		Policy_Sum_Assured = policy_Sum_Assured;
	}

	public int getPolicy_Tenure() {
		return Policy_Tenure;
	}

	public void setPolicy_Tenure(int policy_Tenure) {
		Policy_Tenure = policy_Tenure;
	}

	public String getPolicy_Payment_Frequency() {
		return Policy_Payment_Frequency;
	}

	public void setPolicy_Payment_Frequency(String policy_Payment_Frequency) {
		Policy_Payment_Frequency = policy_Payment_Frequency;
	}

	public String getPolicy_Payment_Status() {
		return Policy_Payment_Status;
	}

	public void setPolicy_Payment_Status(String policy_Payment_Status) {
		Policy_Payment_Status = policy_Payment_Status;
	}

	public static Policy getPolicyinfo(Map<Integer,Policy> mapofpolicy,int Policy_id)
     {
    	 Policy returnPolicy=mapofpolicy.get(Policy_id);
    	 
    	 return returnPolicy;
     }
     
     public static String getPolicyStatus(Map<Integer,Policy>mapofpolicy,int Policy_id)
     {
    	    Policy policy=mapofpolicy.get(Policy_id); // Policy policy = Policy.getPolicyinfo(mapofpolicy, Policy_id);
    	    return policy.getPolicy_Status();
     }
	public static String getPaymentStatus(Map<Integer,Policy>mapofpolicy,int Policy_id)
        {
        	Policy policy = Policy.getPolicyinfo(mapofpolicy, Policy_id);
        	return policy.getPolicy_Payment_Status();
        }

     public static LocalDate getPaymentduedate(Map<Integer,Policy>mapofpolicy,int Policy_id)
     {
    	 Policy policy = Policy.getPolicyinfo(mapofpolicy, Policy_id);
    	 return policy.getPolicy_Due_Date();
     }
   

}

----------------

import java.util.*;

class Main {
    public static void main(String[] args) {
        
        int[] arr = {9,9,0};
        char[] k = ra(arr);
        for(char b : k)
        {
            System.out.print(b);
        }
       
        }
        
        public static char[] ra(int arr[])
        {
             int sum=0;
        for(int c : arr)
        {
            sum=(sum*10)+c;
        }
        sum=sum+1;
        String s=String.valueOf(sum);
      
        char[] k = s.toCharArray();
          return k;
       
  
    }
    
    
}
--------------
class Main
{
    public static void main(String args[])
    {
        String str="Ashutosh is java developer";
       
        String [] strNew = str.split(" ");
        
       
        for(int i=0;i<strNew.length;i++){
             String reverse="";
            for(int j=strNew[i].length()-1 ; j>=0 ;j--){
                reverse = reverse + strNew[i].charAt(j);
            }
            
       System.out.print(reverse + " ");
            
        }
       
       
    }
}



class Main
{
    public static void main(String args[])
    {
        String a="this is my coun&try,India!ydhj";
        String[] d=a.split("[, &!]+");
        
        for(String str : d){
            System.out.print(str + " ");
        }
        
        
    }
} output:> this is my coun try India ydhj 

-----------------------------------------------

{
    public static void main(String args[])
    {
        String s="Madams";
        s=s.toLowerCase();
        String reverse="";
        char[] c=s.toCharArray();
      for(int i=c.length-1;i>=0;i--)
      {
          reverse=reverse+c[i];
      }
        System.out.println(reverse);
        
    }
}
--------------------------------------------------

class Main
{
    public static void main(String args[])
    {
        String s="Madams";
        s=s.toLowerCase();
        String reverse="";
        for(int i=s.length()-1;i>=0;i--)
        {
            reverse=reverse+s.charAt(i);
        }
        System.out.println(reverse);
        
    }
}
----------------------------------------------------

import java.util.Arrays;
import java.util.*;

class Main
{
    public static void main(String args[])
    {
        String s="Care";
        String ss="Racn";
        s=s.toLowerCase();
        ss=ss.toLowerCase();
        
        if(s.length()==ss.length())
        {
            char[] c=s.toCharArray();
            char[] cc=ss.toCharArray();
            
            Arrays.sort(c);
            Arrays.sort(cc);
            boolean result = false;
             result=Arrays.equals(c,cc);
            
           if(result) {
        System.out.println(" are anagram.");
      }
      else {
        System.out.println( " are not anagram.");
      }
        }
        else
        {
            System.out.println("not anagram string ");
        }
    }
}