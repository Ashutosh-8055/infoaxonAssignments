Install Liferay Developer Studio:

Write the steps to do the setup of liferay with LDS.---->

Download the Liferay Dev Studio DXP bundle.
- Unzip the downloaded package to a location on your system.
- Download and install the Java Development Kit (JDK) & Liferay Dev Studio DXP Installing. Ensure a minimum of 8GB RAM and use JDK 8 or a higher version.
- Create a folder according to the project name. Inside this folder, create two subfolders: "tomcat" and "workspace". Open LDS (Liferay Dev Studio) and specify the workspace location. Then, open LDS.
- Download the Liferay Bundle from the Liferay website. Select the 7.4 version of the Liferay bundle. Choose the Liferay DXP 7.4 bundle and extract it into the tomcat folder.
- Go to the liferay tomcat folder and remove the work folder from the Liferay directory. Inside the liferay tomcat bundle, delete the work and temp folders.
inside osgi folder selete state folder
- Start the Liferay Server. Open the Liferay Developer Studio and click on the Servers tab at the bottom. Right-click within the "Servers" tab and select New -> Server. From the list, choose Liferay v7.x and click Next.
- Configure the Liferay Server. In the server configuration window, provide a name for the server and specify the Liferay bundle directory by clicking the "Browse" button. Navigate to the location where you extracted the Liferay bundle and select the appropriate directory. Click Finish to save the server configuration.
- Start the Liferay Server in debug mode for developers.
- Once the server is started, open a web browser and enter the following URL: http://localhost:8080. This will open the Liferay Portal home page, where you can create user accounts, manage sites, and develop applications.
-Start developing your Liferay application within the project.
Use the Liferay Developer Studio features to write code, create portlets, develop themes, and customize the Liferay portal.
When ready, deploy your project to the Liferay DXP server by right-clicking on the project folder, selecting "Run As," and choosing the appropriate deployment option.

----------------------------------------------------------------------------------------------------------------------------------------

To change the portal properties and remove the Term of Use, Reminder Question section, and enable live users monitoring on the Liferay portal, follow these steps:
- Open the portal-ext.properties file in Liferay home.
- Search the web for Liferay Portal 7.4.0 Properties Git.
- Find the properties that correspond to the Term of Use, Reminder Question section, and live user monitoring on the portal.
- In the portal-ext.properties file, identify the property whose value needs to be changed from true to false.

terms.of.use.required=false
users.reminder.queries.enabled=false
users.reminder.queries.custom.question.enabled=false
live.users.enabled=true

---------------------------------------------------------------------------------------------------------------------------------

To create a role named "Portal Manager" with the assigned permissions for user and organization management, site creation, web content management, and document media management in Liferay, follow these steps:
 Log in to your Liferay Portal as an administrator and navigate to the administration interface.
- In the administration interface, access the Control Panel.
- In the Control Panel, locate the "Roles" section and click on it to manage roles and permissions.
- Within the Roles section, search for the option to create a new role. Click on it to initiate the role creation process.
- Provide Role Information: In the role creation window, enter the desired name for the new role, such as "Portal Manager." You can also include a description or other relevant details.
- Assign Permissions: After providing role information, navigate to the permissions section or access control settings.
- Manage Users and Organizations: In the Users and Organizations section, assign the appropriate permissions for viewing, editing, and deleting.
- Manage Site Creation Permissions: In the Sites section, configure the permissions related to site creation.
- Manage Content & Data Permissions: In the Content & Data section, adjust the permissions for Web Content Management and Document Media Management.


---------------------------------------------------------------------------------------------------------------------------------------------

To create an organization with a site and configure the login, landing, and home pages for that organization site in Liferay, follow these steps:

Access the Liferay portal:

Open your web browser and navigate to the Liferay portal's URL.
Log in using administrator or user credentials with sufficient permissions to create organizations and sites.
Create the organization:

Click on the Control Panel (top-right corner) to access the administrative options.
In the Control Panel, go to "Users" > "Organizations".
Click on the "Add" button to create a new organization.
Fill in the necessary details for the organization, such as the name and description.
Click "Save" to create the organization.
Create the site:

While still in the Control Panel, go to "Site Builder" > "Sites".
Click on the "Add" button to create a new site.
Select the "Organization Site" option.
Choose the organization you created in the previous step from the dropdown menu.
Provide a name, description, and any other desired settings for the site.
Click "Save" to create the site.
Configure the login page:

In the Control Panel, go to "Site Builder" > "Pages" and find the login page of the organization site.
Click on the login page to edit it.
Customize the login page as per your requirements, such as adding a logo, changing the layout, or adding portlets.
Save the changes.
Configure the landing page:

Determine the page that you want to set as the landing page for the organization site.
In the Control Panel, go to "Site Builder" > "Pages" and find the desired landing page.
Click on the landing page to edit it.
Customize the landing page by adding content, portlets, or modifying the layout.
Save the changes.
Configure the home page:

In the Control Panel, go to "Site Builder" > "Navigation Menus".
Find the navigation menu for the organization site and click on it to edit.
Locate the "Home" link and click on it to edit the home page configuration.
Select the desired page (e.g., the landing page) as the home page.
Save the changes.
Test the organization site:

Access the Liferay portal and log in as a user assigned to the organization.
Navigate to the organization site and verify that the login, landing, and home pages are configured correctly.

--------------------------------------------------------------------------------------------------------------------------------
Write the steps to create a site template and create a site by using Liferay default site template.

Access the Liferay portal:

Open your web browser and navigate to the Liferay portal's URL.
Log in using administrator or user credentials with sufficient permissions to create site templates and sites.
Create a site template:

Click on the Control Panel (top-right corner) to access the administrative options.
In the Control Panel, go to "Site Builder" > "Site Templates".
Click on the "Add" button to create a new site template.
Provide a name and description for the site template.
Choose the desired template type (e.g., Blank, Blog, Community).
Customize the template by adding pages, content, and configuring layouts as needed.
Click "Save" to create the site template.
Create a new site using the default site template:

In the Control Panel, go to "Site Builder" > "Sites".
Click on the "Add" button to create a new site.
Choose the "Community Site" option or the appropriate option based on your Liferay version.
Fill in the required details for the new site, such as the site name and description.
In the "Templates" section, select "Use Site Template" and choose the default site template provided by Liferay.
Optionally, configure other settings for the site, such as membership, appearance, and content.
Click "Save" to create the site using the default site template.
Test the new site:

Access the Liferay portal and log in as a user assigned to the new site.
Navigate to the newly created site and verify that it is using the default site template with the preconfigured pages, content, and layout.

--------------------------------------------------------------------------------------------------------------------------------------

Write a class for Lead where you need to use below things with the data members you need to think to create the lead data members.
static block, instance block, all literals, all datatypes, constructor, naming convention CAMEL coding, methods, all type of comments, all type of variables etc.

//creating Lead class with data members and member functions

public class Lead {
    // Data members
    private String firstName;
    private String middleName;
    private String lastName;
    private int age;
    private boolean isMarried;
    private boolean isInterested;
    
    // Static block
    static {
        System.out.println("This is a static block. It is executed only once when the class is loaded.");
    }
    
    // Instance block
    {
        System.out.println("This is an instance block. It is executed every time an object is created.");
    }
    
    // Constructor
    public Lead(String firstName, String middleName, String lastName, int age, boolean isMarried, boolean isInterested) {
        this.firstName = firstName;
        this.middleName=middleName;
        this.lastName = lastName;
        this.age = age;
        this.isMarried=isMarried;
        this.isInterested = isInterested;
    }
    
    // Methods
    // Getter methods
    public String getFirstName() {
        return firstName;
    }
    
   public String getMiddleName(){
        return middleName;
   }

    public String getLastName() {
        return lastName;
    }
    
    public int getAge() {
        return age;
    }

    public boolean isMarried(){
                 return isMarried;
     }
    
    public boolean isInterested() {
        return isInterested;
    }
    
    // Setter methods
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    
    public void setMiddleName(String middleName)
    {
             this.middleName=middleName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    
    public void setAge(int age) {
        this.age = age;
    }
    
    public void setIsMarried(boolean isMarried)
     {
            this.isMarried=isMarried;
     }    

    public void setInterested(boolean isInterested) {
        this.isInterested = isInterested;
    }
    
    // Main method
    public static void main(String[] args) {
        // Create an instance of Lead
        Lead lead = new Lead("John", "Goldberg" ,"Doe", 30, true, true);
        
        // Accessing data members using getter methods
        System.out.println("First Name: " + lead.getFirstName());
        System.out.println("Middle Name: " +lead.getMiddleName());
        System.out.println("Last Name: " + lead.getLastName());
        System.out.println("Age: " + lead.getAge());
        System.out.println("Is Interested: " + lead.isInterested());
    }
}

public class PolicyForSpouse  extends Lead  //  creating child class PolicyForSpouse of class Lead by using inheritence
  {
            private String firstName;
            private String middleName;
            private String lastName;
            private int age;
   // Constructor
    public Lead(String firstName, String middleName, String lastName, int age) 
   {
        this.firstName = firstName;
        this.middleName=middleName;
        this.lastName = lastName;
        this.age = age;
       
    }
    
           // getter method

             public String getFirstName() {
        return firstName;
    }
    
            public String getMiddleName(){
        return middleName;
   }

            public String getLastName() {
        return lastName;
    }
    
           public int getAge() {
        return age;
    }

       //setter method 

         public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    
    public void setMiddleName(String middleName)
    {
             this.middleName=middleName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    
    public void setAge(int age) {
        this.age = age;
    }

  }


